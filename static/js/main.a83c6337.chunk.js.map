{"version":3,"sources":["InputPage.jsx","component/Loading.jsx","dataStorage.js","component/Info.jsx","component/Infos.jsx","component/chart/DonutChart.jsx","component/Table.jsx","component/chart/BarChart.jsx","component/ToggleButtons.jsx","component/chart/LineChart.jsx","MainPage.jsx","component/NavBar.jsx","App.js","index.js"],"names":["InputPage","props","onDragEnter","onDragOver","onDragLeave","onDrop","onChange","show","fileEnter","demo","className","style","backgroundColor","size","display","type","accept","onClick","Loading","getEnterprisesSymbol","enterprises","temp","enterprise","push","symbol","getEnterprisesWeight","price","totalQuantity","currentPrice","toFixed","parseFloat","getEnterpriseProfit","Math","round","totalProfit","totalCost","Info","title","data","fontSize","Infos","infos","map","info","index","DonutChart","series","labels","defaultSetting","chart","foreColor","stroke","colors","dataLabels","enabled","plotOptions","pie","donut","name","fontWeight","value","fontFamily","formatter","val","total","label","color","w","globals","seriesTotals","reduce","a","b","options","height","Table","headRow","dataRows","targetData","useState","page","setPage","movePage","offset","length","Round","number","decimal","pow","head","cursor","slice","row","target","aveCost","toString","random","msg","disabled","BarChart","yaxis","y","bar","ranges","from","Number","NEGATIVE_INFINITY","to","MAX_SAFE_INTEGER","columnWidth","xaxis","categories","ToggleButtons","buttons","CLASS","e","message","LineChart","zoom","curve","MainPage","dataBundle","reqState","x","Date","toLocaleString","hisPerformance","setHisPerformance","holdingStockTable","setHoldingStockTable","useEffect","console","log","document","fileLoaded","changeHisPerformance","infoData","tradingHistoryTable","monthsAgo","daysAgo","searchKey","performanceHistory","sessionStorage","getItem","JSON","parse","firstDate","setMonth","getMonth","setDate","getDate","now","compareDate","ay","getFullYear","am","ad","by","bm","bd","symbols","d","currentAsset","pastPrice","s","i","date","tradingHistory","trade","tradingDate","pp","find","p","quantity","toLocaleDateString","setItem","stringify","visibility","id","myAsset","ROI","textContent","includes","month","btnInfo","parentNode","childNodes","classList","remove","add","NavBar","currentPage","showNavbar","setShowNavbar","topPixel","setTopPixel","setTimeout","clearTimeout","toggleNavbar","position","top","topPixelsLowerBound","App","setDataBundle","reqSend","setReqState","setFileEnter","setCurrentPage","sample","indexBundle","purchasePrice","csvData","requestFinanceData","initData","loadData","rows","trim","isValidCSV","indexOf","totalAsset","currentPrices","localData","l","findEnterprise","ar","trading","t","holdingPercent","profit","th","profitPercent","sort","t1","t2","getEnterprisesData","d1","split","d2","parseInt","getTradingHistory","method","url","headers","params","ss","getReqSymbols","interval","range","axios","request","then","response","close","timestamp","clear","catch","error","toast","fileData","errorMessage","csvReader","file","reader","FileReader","onload","dirtyRows","result","drow","readAsBinaryString","maxHeight","overflow","dataset","warn","stopPropagation","preventDefault","dataTransfer","items","getAsFile","files","autoClose","theme","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a83c6337.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { FaFileCsv } from 'react-icons/fa'\r\n\r\nconst InputPage = (props) => {\r\n  const {\r\n    onDragEnter,\r\n    onDragOver,\r\n    onDragLeave,\r\n    onDrop,\r\n    onChange,\r\n    show,\r\n    fileEnter,\r\n    demo\r\n  } = props\r\n  return (\r\n    <div className={show ? '' : 'hide'}>\r\n      <h2>輸入檔案</h2>\r\n      <div\r\n        className=\"drag-file-block\"\r\n        onDragEnter={onDragEnter}\r\n        onDragOver={onDragOver}\r\n        onDragLeave={onDragLeave}\r\n        onDrop={onDrop}\r\n        style={\r\n          fileEnter\r\n            ? { backgroundColor: 'rgba(173, 216, 230, .5)' }\r\n            : { backgroundColor: 'inherit' }\r\n        }\r\n      >\r\n        <div className=\"dropInfo\">\r\n          <div className=\"fileIcon\">\r\n            <FaFileCsv size={30} />\r\n          </div>\r\n          <div>將 csv 檔拖曳至此</div>\r\n        </div>\r\n      </div>\r\n      <label className=\"input-label\">\r\n        <span>📁 上傳檔案</span>\r\n        <div style={{ display: 'none' }}>\r\n          <input type=\"file\" accept=\".csv\" onChange={onChange} />\r\n        </div>\r\n      </label>\r\n      <label className=\"input-label\" onClick={demo}>\r\n        <span>💡 使用範例</span>\r\n      </label>\r\n    </div>\r\n  )\r\n}\r\n\r\nInputPage.propTypes = {\r\n  onDragEnter: PropTypes.func,\r\n  onDragLeave: PropTypes.func,\r\n  onDragOver: PropTypes.func,\r\n  onDrop: PropTypes.func,\r\n  onChange: PropTypes.func,\r\n  show: PropTypes.bool,\r\n  fileEnter: PropTypes.bool,\r\n  demo: PropTypes.func\r\n}\r\n\r\nexport default InputPage\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Loading = (props) => {\r\n  const { show } = props\r\n  return <div className={show ? 'load' : 'hide'}></div>\r\n}\r\n\r\nLoading.propTypes = {\r\n  show: PropTypes.bool\r\n}\r\n\r\nexport default Loading\r\n","const getEnterprisesData = (tradingHistory, indexBundle) => {\r\n  //   store trading information with every enterprise\r\n  const temp = []\r\n  let totalCost = 0\r\n  let totalProfit = 0\r\n  let totalAsset = 0\r\n  const currentPrices = {}\r\n  //   get Enterprise Data from localStorage\r\n  const localData = JSON.parse(sessionStorage.getItem('symbols'))\r\n  //   get newest price of every enterprise\r\n  for (const l of localData) {\r\n    currentPrices[l.symbol] = l.data[l.data.length - 1]\r\n  }\r\n  //   use \"symbol\" to find match enterprise\r\n  const findEnterprise = (ar, target) => {\r\n    for (let i = 0; i < ar.length; i++) {\r\n      if (ar[i].symbol === target) return i\r\n    }\r\n    return false\r\n  }\r\n  //  for every trading-history in csv file\r\n  for (const trading of tradingHistory) {\r\n    //   get trading information and index by indexBundle\r\n    const symbol = trading[indexBundle.symbol]\r\n    const tradingDate = parseFloat(trading[indexBundle.tradingDate])\r\n    const purchasePrice = parseFloat(trading[indexBundle.purchasePrice])\r\n    const quantity = parseFloat(trading[indexBundle.quantity])\r\n    // set this trading's enterprise newest price\r\n    const currentPrice = currentPrices[symbol]\r\n\r\n    totalCost += purchasePrice * quantity\r\n    totalAsset += currentPrice * quantity\r\n\r\n    const index = findEnterprise(temp, symbol)\r\n    // if found enterprise, then add this trading information\r\n    if (index !== false) {\r\n      temp[index].tradingHistory.push({\r\n        purchasePrice: purchasePrice,\r\n        quantity: quantity\r\n      })\r\n      temp[index].totalCost += purchasePrice * quantity\r\n      temp[index].totalQuantity += quantity\r\n    } else {\r\n      // if not found, init new enterprise information\r\n      temp.push({\r\n        symbol: symbol,\r\n        currentPrice: currentPrice,\r\n        tradingDate: tradingDate,\r\n        totalCost: purchasePrice * quantity,\r\n        totalQuantity: quantity,\r\n        tradingHistory: [\r\n          {\r\n            purchasePrice: purchasePrice,\r\n            quantity: quantity\r\n          }\r\n        ]\r\n      })\r\n    }\r\n  }\r\n\r\n  // set enterprise's totalProfit\r\n  for (const t of temp) {\r\n    t.holdingPercent =\r\n      Math.round(((t.currentPrice * t.totalQuantity) / totalAsset) * 10000) /\r\n      100\r\n    let profit = 0\r\n    const currentPrice = t.currentPrice\r\n    for (const th of t.tradingHistory) {\r\n      profit += (currentPrice - th.purchasePrice) * th.quantity\r\n    }\r\n    t.totalProfit = profit\r\n    totalProfit += profit\r\n  }\r\n\r\n  // set enterprise's profit percent\r\n  for (const t of temp) {\r\n    t.profitPercent = Math.round((t.totalProfit / t.totalCost) * 10000) / 100\r\n  }\r\n\r\n  // sort emterprise by holdingPercent\r\n  temp.sort((t1, t2) => {\r\n    return t2.holdingPercent - t1.holdingPercent\r\n  })\r\n\r\n  return {\r\n    infoData: {\r\n      totalCost: totalCost,\r\n      myAsset: totalCost + totalProfit,\r\n      ROI: totalProfit / totalCost,\r\n      totalProfit: totalProfit\r\n    },\r\n    enterprises: temp\r\n  }\r\n}\r\n\r\nconst getTradingHistory = (tradingHistory, indexBundle) => {\r\n  const temp = []\r\n  for (const trading of tradingHistory) {\r\n    const symbol = trading[indexBundle.symbol]\r\n    let tradingDate = trading[indexBundle.tradingDate]\r\n    const purchasePrice = parseFloat(trading[indexBundle.purchasePrice])\r\n    const quantity = parseFloat(trading[indexBundle.quantity])\r\n\r\n    if (!tradingDate) tradingDate = 'NaN'\r\n    else {\r\n      tradingDate =\r\n        tradingDate.slice(0, 4) +\r\n        '/' +\r\n        tradingDate.slice(4, 6) +\r\n        '/' +\r\n        tradingDate.slice(6, 8)\r\n    }\r\n    temp.push({\r\n      symbol: symbol,\r\n      tradingDate: tradingDate,\r\n      quantity: quantity,\r\n      purchasePrice: purchasePrice,\r\n      totalCost: purchasePrice * quantity\r\n    })\r\n  }\r\n  // sort by tradingDate\r\n  temp.sort((t1, t2) => {\r\n    if (t1.tradingDate === 'NaN' && t2.tradingDate !== 'NaN') return 1\r\n    if (t1.tradingDate !== 'NaN' && t2.tradingDate === 'NaN') return -1\r\n    const d1 = t1.tradingDate.split('/')\r\n    const d2 = t2.tradingDate.split('/')\r\n    if (parseInt(d1[0]) > parseInt(d2[0])) return -1\r\n    if (parseInt(d1[0]) < parseInt(d2[0])) return 1\r\n    if (parseInt(d1[1]) > parseInt(d2[1])) return -1\r\n    if (parseInt(d1[1]) < parseInt(d2[1])) return 1\r\n    if (parseInt(d1[2]) > parseInt(d2[2])) return -1\r\n    if (parseInt(d1[2]) < parseInt(d2[2])) return 1\r\n    return -1\r\n  })\r\n  return temp\r\n}\r\n\r\nconst getEnterprisesSymbol = (enterprises) => {\r\n  const temp = []\r\n  for (const enterprise of enterprises) {\r\n    temp.push(enterprise.symbol)\r\n  }\r\n  return temp\r\n}\r\n\r\nconst getEnterprisesWeight = (enterprises) => {\r\n  const temp = []\r\n  for (const enterprise of enterprises) {\r\n    const price = (enterprise.totalQuantity * enterprise.currentPrice).toFixed(\r\n      2\r\n    )\r\n    temp.push(parseFloat(price))\r\n  }\r\n  return temp\r\n}\r\n\r\nconst getEnterpriseProfit = (enterprises) => {\r\n  const temp = []\r\n  for (const enterprise of enterprises) {\r\n    temp.push(\r\n      Math.round((enterprise.totalProfit / enterprise.totalCost) * 10000) / 100\r\n    )\r\n  }\r\n  return temp\r\n}\r\n\r\nconst getSample = () => {\r\n  return {\r\n    symbols: ['MSFT', 'SMH', 'QQQ', 'VOO'],\r\n    indexBundle: { symbol: 0, purchasePrice: 10, quantity: 11, tradingDate: 9 },\r\n    csvData: [\r\n      [\r\n        'SMH',\r\n        '300',\r\n        '2021/12/6',\r\n        '16:00 EST',\r\n        '-1.1499939',\r\n        '299.57',\r\n        '301.38',\r\n        '290.51',\r\n        '5105964',\r\n        '20211206',\r\n        '299.02',\r\n        '0.96984',\r\n        '',\r\n        '',\r\n        '',\r\n        ''\r\n      ],\r\n      [\r\n        'MSFT',\r\n        '326.19',\r\n        '2021/12/6',\r\n        '16:00 EST',\r\n        '3.1799927',\r\n        '323.95',\r\n        '327.42',\r\n        '319.23',\r\n        '30032556',\r\n        '20211126',\r\n        '334.11',\r\n        '0.29929',\r\n        '',\r\n        '',\r\n        '',\r\n        ''\r\n      ],\r\n      [\r\n        'MSFT',\r\n        '326.19',\r\n        '2021/12/6',\r\n        '16:00 EST',\r\n        '3.1799927',\r\n        '323.95',\r\n        '327.42',\r\n        '319.23',\r\n        '30032556',\r\n        '20211206',\r\n        '324.71',\r\n        '1.75542',\r\n        '',\r\n        '',\r\n        '',\r\n        ''\r\n      ],\r\n      [\r\n        'VOO',\r\n        '421.82',\r\n        '2021/12/6',\r\n        '16:00 EST',\r\n        '4.98001',\r\n        '419.41',\r\n        '423.64',\r\n        '417',\r\n        '7124862',\r\n        '20211126',\r\n        '424.96',\r\n        '0.35298',\r\n        '',\r\n        '',\r\n        '',\r\n        ''\r\n      ],\r\n      [\r\n        'VOO',\r\n        '421.82',\r\n        '2021/12/6',\r\n        '16:00 EST',\r\n        '4.98001',\r\n        '419.41',\r\n        '423.64',\r\n        '417',\r\n        '7124862',\r\n        '20211206',\r\n        '419.85',\r\n        '2.71527',\r\n        '',\r\n        '',\r\n        '',\r\n        ''\r\n      ],\r\n      [\r\n        'QQQ',\r\n        '386.2',\r\n        '2021/12/6',\r\n        '16:00 EST',\r\n        '3.0700073',\r\n        '383.63',\r\n        '387.6',\r\n        '379.31',\r\n        '64706783',\r\n        '20211126',\r\n        '396.07',\r\n        '0.25248',\r\n        '',\r\n        '',\r\n        '',\r\n        ''\r\n      ],\r\n      [\r\n        'QQQ',\r\n        '386.2',\r\n        '2021/12/6',\r\n        '16:00 EST',\r\n        '3.0700073',\r\n        '383.63',\r\n        '387.6',\r\n        '379.31',\r\n        '64706783',\r\n        '20211206',\r\n        '384.08',\r\n        '2.23912',\r\n        '',\r\n        '',\r\n        '',\r\n        ''\r\n      ]\r\n    ]\r\n  }\r\n}\r\n\r\nconst getInfos = (infoData) => {\r\n  return [\r\n    {\r\n      data: parseFloat(infoData.totalCost.toFixed(2)),\r\n      title: '投入金額'\r\n    },\r\n    {\r\n      data: parseFloat(infoData.myAsset.toFixed(2)),\r\n      title: '股票市值'\r\n    },\r\n    {\r\n      data: parseFloat((infoData.ROI * 100).toFixed(2)) + '%',\r\n      title: '報酬率'\r\n    },\r\n    {\r\n      data:\r\n        parseFloat(infoData.totalProfit) < 0\r\n          ? parseFloat(parseFloat(infoData.totalProfit).toFixed(2))\r\n          : '+' + parseFloat(parseFloat(infoData.totalProfit).toFixed(2)),\r\n      title: '總損益'\r\n    }\r\n  ]\r\n}\r\n\r\nconst getToggleButtons = () => {\r\n  return [\r\n    { month: 0, date: 7, message: '7天' },\r\n    { month: 1, date: 0, message: '1月' },\r\n    { month: 6, date: 0, message: '6月' },\r\n    { month: 12, date: 0, message: '1年' }\r\n  ]\r\n}\r\n\r\nexport {\r\n  getSample,\r\n  getEnterprisesData,\r\n  getTradingHistory,\r\n  getEnterprisesSymbol,\r\n  getEnterprisesWeight,\r\n  getEnterpriseProfit,\r\n  getToggleButtons,\r\n  getInfos\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Info = (props) => {\r\n  const { title, data } = props\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"title\" style={{ fontSize: '15px' }}>\r\n        {title}\r\n      </div>\r\n      <div className=\"data\" style={{ fontSize: '35px' }}>\r\n        {data}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nInfo.propTypes = {\r\n  title: PropTypes.string,\r\n  data: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n}\r\n\r\nexport default Info\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Info from './Info'\r\n\r\nconst Infos = (props) => {\r\n  const { infos } = props\r\n\r\n  return infos.map((info, index) => (\r\n    <Info key={index} title={info.title} data={info.data} />\r\n  ))\r\n}\r\n\r\nInfos.propTypes = {\r\n  infos: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      title: PropTypes.string,\r\n      data: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\r\n    })\r\n  )\r\n}\r\n\r\nexport default Infos\r\n","import React from 'react'\r\nimport ReactApexChart from 'react-apexcharts'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst DonutChart = (props) => {\r\n  const { series, labels } = props\r\n  const defaultSetting = {\r\n    chart: {\r\n      foreColor: '#fff'\r\n    },\r\n    stroke: {\r\n      colors: ['#161d20']\r\n    },\r\n    colors: ['#ED5565', '#FFCE54', '#48CFAD', '#4FC1E9', '#FC6E51', '#5D9CEC'],\r\n    dataLabels: {\r\n      enabled: false\r\n    },\r\n    plotOptions: {\r\n      pie: {\r\n        donut: {\r\n          labels: {\r\n            show: true,\r\n            name: {\r\n              show: true,\r\n              fontSize: '20',\r\n              fontWeight: '700'\r\n            },\r\n            value: {\r\n              show: true,\r\n              fontSize: '16',\r\n              fontFamily: 'Microsoft JhengHei',\r\n              fontWeight: '700',\r\n              formatter: (val) => {\r\n                return '$' + parseFloat(parseFloat(val).toFixed(0))\r\n              }\r\n            },\r\n            total: {\r\n              show: true,\r\n              label: 'Total',\r\n              fontFamily: 'Microsoft JhengHei',\r\n              color: '#fff',\r\n              fontWeight: '700',\r\n              formatter: (w) => {\r\n                const total = w.globals.seriesTotals.reduce((a, b) => {\r\n                  return a + b\r\n                }, 0)\r\n                return '$' + parseFloat(total.toFixed(0))\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ReactApexChart\r\n      options={{\r\n        labels: labels,\r\n        ...defaultSetting\r\n      }}\r\n      series={series}\r\n      type=\"donut\"\r\n      height=\"200px\"\r\n    />\r\n  )\r\n}\r\n\r\nDonutChart.propTypes = {\r\n  series: PropTypes.arrayOf(PropTypes.number),\r\n  labels: PropTypes.arrayOf(PropTypes.string)\r\n}\r\n\r\nexport default DonutChart\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst Table = (props) => {\r\n  const { headRow, dataRows, targetData } = props\r\n  const [page, setPage] = useState(0)\r\n\r\n  const movePage = (offset) => {\r\n    if (page === 0 && offset === -1) return\r\n    if ((page + offset) * 5 >= dataRows.length) return\r\n    setPage(page + offset)\r\n  }\r\n\r\n  const getData = () => {\r\n    const data = dataRows.slice(page * 5, page * 5 + 5)\r\n    return data.map((row, index) => (\r\n      <tr key={index}>\r\n        {targetData.map((target) => {\r\n          if (target === 'averageCost') {\r\n            const aveCost = Round(row.totalCost / row.totalQuantity, 2)\r\n            return (\r\n              <td\r\n                key={\r\n                  aveCost.toString() +\r\n                  '-' +\r\n                  index.toString() +\r\n                  '-' +\r\n                  Math.random().toFixed(3)\r\n                }\r\n              >\r\n                {' '}\r\n                {aveCost}{' '}\r\n              </td>\r\n            )\r\n          }\r\n          if (target === 'holdingPercent') {\r\n            return (\r\n              <td\r\n                key={\r\n                  row[target].toString() +\r\n                  '-' +\r\n                  index.toString() +\r\n                  '-' +\r\n                  Math.random().toFixed(3)\r\n                }\r\n              >\r\n                {row[target] + '%'}\r\n              </td>\r\n            )\r\n          }\r\n          if (target === 'totalProfit' || target === 'profitPercent') {\r\n            const green = { color: '#76c68f' }\r\n            const red = { color: '#F15B46' }\r\n            let msg =\r\n              row[target] < 0\r\n                ? row[target].toFixed(2)\r\n                : '+' + row[target].toFixed(2)\r\n            if (target === 'profitPercent') msg += '%'\r\n            return (\r\n              <td\r\n                key={\r\n                  row[target].toString() +\r\n                  '-' +\r\n                  index.toString() +\r\n                  '-' +\r\n                  Math.random().toFixed(3)\r\n                }\r\n                style={row[target] < 0 ? red : green}\r\n              >\r\n                {msg}\r\n              </td>\r\n            )\r\n          }\r\n          return (\r\n            <td\r\n              key={\r\n                row[target].toString() +\r\n                '-' +\r\n                index.toString() +\r\n                '-' +\r\n                Math.random().toFixed(3)\r\n              }\r\n            >\r\n              {typeof row[target] === 'number'\r\n                ? Round(row[target], 2)\r\n                : row[target]}\r\n            </td>\r\n          )\r\n        })}\r\n      </tr>\r\n    ))\r\n  }\r\n\r\n  const Round = (number, decimal) =>\r\n    Math.round(number * Math.pow(10, decimal)) / Math.pow(10, decimal)\r\n  return (\r\n    <div className=\"tableBlock\">\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            {headRow.map((head) => {\r\n              return (\r\n                <th\r\n                  key={head}\r\n                  style={head === '損益' ? { cursor: 'pointer' } : {}}\r\n                >\r\n                  {head}\r\n                </th>\r\n              )\r\n            })}\r\n          </tr>\r\n        </thead>\r\n        <tbody>{getData()}</tbody>\r\n      </table>\r\n      <div className=\"paging\">\r\n        <button\r\n          className=\"page\"\r\n          onClick={() => movePage(-1)}\r\n          disabled={page === 0 ? 'disabled' : ''}\r\n        >\r\n          {'<'}\r\n        </button>\r\n        <button\r\n          className=\"page\"\r\n          onClick={() => movePage(1)}\r\n          disabled={(page + 1) * 5 >= dataRows.length ? 'disabled' : ''}\r\n        >\r\n          {'>'}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nTable.propTypes = {\r\n  headRow: PropTypes.arrayOf(PropTypes.string),\r\n  dataRows: PropTypes.arrayOf(PropTypes.object),\r\n  targetData: PropTypes.arrayOf(PropTypes.string)\r\n}\r\n\r\nexport default Table\r\n","import React from 'react'\r\nimport ReactApexChart from 'react-apexcharts'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst BarChart = (props) => {\r\n  const { series, labels } = props\r\n  const defaultSetting = {\r\n    chart: {\r\n      type: 'bar',\r\n      foreColor: '#fff'\r\n    },\r\n    yaxis: {\r\n      labels: {\r\n        formatter: function (y) {\r\n          return y + '%'\r\n        }\r\n      }\r\n    },\r\n    plotOptions: {\r\n      bar: {\r\n        colors: {\r\n          ranges: [\r\n            {\r\n              from: Number.NEGATIVE_INFINITY,\r\n              to: 0,\r\n              color: '#F15B46'\r\n            },\r\n            {\r\n              from: 0,\r\n              to: Number.MAX_SAFE_INTEGER,\r\n              color: '#76c68f'\r\n            }\r\n          ]\r\n        },\r\n        columnWidth: '45%'\r\n      }\r\n    },\r\n    dataLabels: {\r\n      enabled: false\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ReactApexChart\r\n      options={{\r\n        xaxis: {\r\n          categories: labels\r\n        },\r\n        ...defaultSetting\r\n      }}\r\n      series={[\r\n        {\r\n          name: 'Profit',\r\n          data: series\r\n        }\r\n      ]}\r\n      type=\"bar\"\r\n      height=\"240px\"\r\n    />\r\n  )\r\n}\r\n\r\nBarChart.propTypes = {\r\n  series: PropTypes.arrayOf(PropTypes.number),\r\n  labels: PropTypes.arrayOf(PropTypes.string)\r\n}\r\n\r\nexport default BarChart\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst ToggleButtons = (props) => {\r\n  const { buttons, onClick } = props\r\n\r\n  return buttons.map((b, index) => {\r\n    const CLASS = index === 0 ? 'timeButton focus' : 'timeButton'\r\n    return (\r\n      <button key={index} className={CLASS} onClick={(e) => onClick(e, b)}>\r\n        {b.message}\r\n      </button>\r\n    )\r\n  })\r\n}\r\n\r\nToggleButtons.propTypes = {\r\n  buttons: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      month: PropTypes.number,\r\n      date: PropTypes.number,\r\n      message: PropTypes.string\r\n    })\r\n  ),\r\n  onClick: PropTypes.func\r\n}\r\n\r\nexport default ToggleButtons\r\n","import React from 'react'\r\nimport ReactApexChart from 'react-apexcharts'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst LineChart = (props) => {\r\n  const { data } = props\r\n  const options = {\r\n    chart: {\r\n      height: 350,\r\n      type: 'area',\r\n      foreColor: '#fff',\r\n      zoom: {\r\n        enabled: false\r\n      }\r\n    },\r\n    stroke: {\r\n      curve: 'straight'\r\n    },\r\n    xaxis: {\r\n      type: 'datetime'\r\n    },\r\n    yaxis: {\r\n      labels: {\r\n        formatter: function (value) {\r\n          return value.toFixed(1)\r\n        }\r\n      }\r\n    },\r\n    dataLabels: {\r\n      enabled: false\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ReactApexChart\r\n      options={options}\r\n      series={[\r\n        {\r\n          name: 'price',\r\n          data: data\r\n        }\r\n      ]}\r\n      type=\"area\"\r\n      style={{ color: '#000' }}\r\n      height=\"300px\"\r\n    />\r\n  )\r\n}\r\n\r\nLineChart.propTypes = {\r\n  data: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      x: PropTypes.string,\r\n      y: PropTypes.number\r\n    })\r\n  )\r\n}\r\n\r\nexport default LineChart\r\n","import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {\r\n  getInfos,\r\n  getEnterprisesWeight,\r\n  getEnterprisesSymbol,\r\n  getEnterpriseProfit,\r\n  getToggleButtons\r\n} from './dataStorage'\r\nimport Infos from './component/Infos'\r\nimport DonutChart from './component/chart/DonutChart'\r\nimport Table from './component/Table'\r\nimport BarChart from './component/chart/BarChart'\r\nimport ToggleButtons from './component/ToggleButtons'\r\nimport LineChart from './component/chart/LineChart'\r\n\r\nconst MainPage = (props) => {\r\n  const { show, dataBundle, reqState } = props\r\n  const [hisPerformance, setHisPerformance] = useState([\r\n    {\r\n      x: new Date().toLocaleString(),\r\n      y: 100\r\n    }\r\n  ])\r\n  const [holdingStockTable, setHoldingStockTable] = useState({\r\n    headRow: ['代號', '股數', '單位成本', '損益', '占比'],\r\n    targetData: [\r\n      'symbol',\r\n      'totalQuantity',\r\n      'averageCost',\r\n      'totalProfit',\r\n      'holdingPercent'\r\n    ]\r\n  })\r\n  useEffect(() => {\r\n    console.log('in useEffect')\r\n    document.title = 'Portfolio'\r\n    if (reqState.fileLoaded) {\r\n      changeHisPerformance(0, 7)\r\n    }\r\n  }, [dataBundle])\r\n  const tradingHistoryTable = {\r\n    headRow: ['代號', '交易時間', '股數', '成交價', '金額'],\r\n    targetData: [\r\n      'symbol',\r\n      'tradingDate',\r\n      'quantity',\r\n      'purchasePrice',\r\n      'totalCost'\r\n    ]\r\n  }\r\n\r\n  const handleToggleButtons = (e, btnInfo) => {\r\n    const parent = e.target.parentNode\r\n    const buttons = parent.childNodes\r\n    for (const button of buttons) {\r\n      button.classList.remove('focus')\r\n    }\r\n    e.target.classList.add('focus')\r\n    changeHisPerformance(btnInfo.month, btnInfo.date)\r\n  }\r\n\r\n  const changeHisPerformance = (monthsAgo, daysAgo) => {\r\n    const searchKey = monthsAgo + '-' + daysAgo + '-' + 'performance'\r\n    let performanceHistory = sessionStorage.getItem(searchKey)\r\n    if (performanceHistory) {\r\n      console.log('get search:', searchKey)\r\n      setHisPerformance(JSON.parse(performanceHistory))\r\n    } else {\r\n      performanceHistory = []\r\n      // find first data date\r\n      const firstDate = new Date()\r\n      firstDate.setMonth(firstDate.getMonth() - monthsAgo)\r\n      firstDate.setDate(firstDate.getDate() - daysAgo)\r\n      const now = Date.now()\r\n      const compareDate = (a, b) => {\r\n        const ay = a.getFullYear()\r\n        const am = a.getMonth()\r\n        const ad = a.getDate()\r\n\r\n        const by = b.getFullYear()\r\n        const bm = b.getMonth()\r\n        const bd = b.getDate()\r\n\r\n        if (ay < by) return 1\r\n        if (ay === by && am < bm) return 1\r\n        if (ay === by && am === bm && ad < bd) return 1\r\n        if (ay === by && am === bm && ad === bd) return 0\r\n        return -1\r\n      }\r\n      const symbols = JSON.parse(sessionStorage.getItem('symbols'))\r\n      // loop with every day\r\n      // eslint-disable-next-line no-unmodified-loop-condition\r\n      for (let d = firstDate; d <= now; d.setDate(d.getDate() + 1)) {\r\n        let currentAsset = 0\r\n        // use request data to get every enterprise price in the past\r\n        const pastPrice = []\r\n        // for every symbol\r\n        for (const s of symbols) {\r\n          // for every date in symbol\r\n          for (let i = 0; i < s.date.length; i++) {\r\n            if (i === s.date.length - 1) {\r\n              pastPrice.push({ symbol: s.symbol, price: s.data[i] })\r\n              break\r\n            }\r\n            // 1個月前的每一天 == 資料紀錄的日期\r\n            if (compareDate(d, new Date(s.date[i] * 1000)) === 0) {\r\n              pastPrice.push({ symbol: s.symbol, price: s.data[i] })\r\n              break\r\n            }\r\n            // 假日 or 休市日\r\n            if (\r\n              compareDate(d, new Date(s.date[i] * 1000)) === -1 &&\r\n              compareDate(d, new Date(s.date[i + 1] * 1000)) === 1\r\n            ) {\r\n              pastPrice.push({ symbol: s.symbol, price: s.data[i - 1] })\r\n              break\r\n            }\r\n          }\r\n        }\r\n        // loop with every tradingHistory\r\n        for (const trade of dataBundle.tradingHistory) {\r\n          // 交易時間比現在還要早\r\n          if (\r\n            compareDate(d, new Date(trade.tradingDate)) === -1 ||\r\n            compareDate(d, new Date(trade.tradingDate)) === 0\r\n          ) {\r\n            const pp = pastPrice.find((p) => p.symbol === trade.symbol)\r\n            currentAsset += trade.quantity * pp.price\r\n          }\r\n        }\r\n        performanceHistory.push({ x: d.toLocaleDateString(), y: currentAsset })\r\n      }\r\n      sessionStorage.setItem(searchKey, JSON.stringify(performanceHistory))\r\n      setHisPerformance(performanceHistory)\r\n    }\r\n  }\r\n\r\n  const handleTableClick = (e) => {\r\n    if (e.target.textContent !== '損益') return\r\n\r\n    if (holdingStockTable.targetData.includes('profitPercent')) {\r\n      setHoldingStockTable({\r\n        headRow: holdingStockTable.headRow,\r\n        targetData: [\r\n          'symbol',\r\n          'totalQuantity',\r\n          'averageCost',\r\n          'totalProfit',\r\n          'holdingPercent'\r\n        ]\r\n      })\r\n    } else {\r\n      setHoldingStockTable({\r\n        headRow: holdingStockTable.headRow,\r\n        targetData: [\r\n          'symbol',\r\n          'totalQuantity',\r\n          'averageCost',\r\n          'profitPercent',\r\n          'holdingPercent'\r\n        ]\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <main style={show ? {} : { visibility: 'hidden' }}>\r\n      <h2>持股分析</h2>\r\n      <div className=\"block-row\" id=\"info\">\r\n        <Infos infos={getInfos(dataBundle.infoData)} />\r\n      </div>\r\n      <div className=\"block-title res-title\">\r\n        <h3>占比</h3>\r\n      </div>\r\n      <div className=\"block-row\">\r\n        <div className=\"left chart\">\r\n          <DonutChart\r\n            series={\r\n              getEnterprisesWeight(dataBundle.enterprises).length === 0\r\n                ? [80000, 45000, 16000]\r\n                : getEnterprisesWeight(dataBundle.enterprises)\r\n            }\r\n            labels={\r\n              getEnterprisesSymbol(dataBundle.enterprises).length === 0\r\n                ? ['stock1', 'stock2', 'stock3']\r\n                : getEnterprisesSymbol(dataBundle.enterprises)\r\n            }\r\n          />\r\n        </div>\r\n        <div className=\"right\" onClick={handleTableClick}>\r\n          <Table\r\n            headRow={holdingStockTable.headRow}\r\n            dataRows={dataBundle.enterprises}\r\n            targetData={holdingStockTable.targetData}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"block-row\">\r\n        <div className=\"left chart\" style={{ color: '#000' }}>\r\n          <div className=\"block-title\">\r\n            <h3>績效</h3>\r\n          </div>\r\n          <BarChart\r\n            series={\r\n              getEnterpriseProfit(dataBundle.enterprises).length === 0\r\n                ? [5, 3, -10, 10, 7]\r\n                : getEnterpriseProfit(dataBundle.enterprises)\r\n            }\r\n            labels={\r\n              getEnterprisesSymbol(dataBundle.enterprises).length === 0\r\n                ? ['stock1', 'stock2', 'stock3', 'stock4', 'stock5']\r\n                : getEnterprisesSymbol(dataBundle.enterprises)\r\n            }\r\n          />\r\n        </div>\r\n        <div className=\"right\">\r\n          <div className=\"block-title\">\r\n            <h3>交易紀錄</h3>\r\n          </div>\r\n          <Table\r\n            headRow={tradingHistoryTable.headRow}\r\n            dataRows={dataBundle.tradingHistory}\r\n            targetData={tradingHistoryTable.targetData}\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"block-title res-title\">\r\n        <h3>股票市值走勢</h3>\r\n      </div>\r\n      <div>\r\n        <div>\r\n          <ToggleButtons\r\n            buttons={getToggleButtons()}\r\n            onClick={handleToggleButtons}\r\n          />\r\n        </div>\r\n        <LineChart data={hisPerformance} />\r\n      </div>\r\n      <div className=\"footer\"></div>\r\n    </main>\r\n  )\r\n}\r\n\r\nMainPage.propTypes = {\r\n  show: PropTypes.bool,\r\n  dataBundle: PropTypes.shape({\r\n    infoData: PropTypes.shape({\r\n      totalCost: PropTypes.number,\r\n      myAsset: PropTypes.number,\r\n      ROI: PropTypes.number,\r\n      totalProfit: PropTypes.number\r\n    }),\r\n    enterprises: PropTypes.array,\r\n    tradingHistory: PropTypes.array\r\n  }),\r\n  reqState: PropTypes.shape({\r\n    reqSend: PropTypes.bool,\r\n    fileLoaded: PropTypes.bool\r\n  })\r\n}\r\n\r\nexport default MainPage\r\n","import React, { useState, useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { SiSimpleanalytics } from 'react-icons/si'\r\nimport { AiOutlineFile } from 'react-icons/ai'\r\nimport {\r\n  MdOutlineKeyboardArrowDown,\r\n  MdOutlineKeyboardArrowUp\r\n} from 'react-icons/md'\r\n\r\nconst NavBar = (props) => {\r\n  const { onClick, currentPage } = props\r\n  const [showNavbar, setShowNavbar] = useState(true)\r\n  const [topPixel, setTopPixel] = useState(0)\r\n  const topPixelsLowerBound = -50\r\n  const navbarHeight = 50\r\n  const step = 10\r\n\r\n  useEffect(() => {\r\n    if (showNavbar && topPixel < 0) {\r\n      const id = setTimeout(() => {\r\n        setTopPixel((topPixel) => topPixel + step)\r\n      }, 50)\r\n      return () => clearTimeout(id)\r\n    } else if (\r\n      !showNavbar &&\r\n      topPixel <= 0 &&\r\n      topPixel >= topPixelsLowerBound\r\n    ) {\r\n      const id = setTimeout(() => {\r\n        setTopPixel((topPixel) => topPixel - step)\r\n      }, 50)\r\n      return () => clearTimeout(id)\r\n    }\r\n  })\r\n\r\n  const toggleNavbar = () => {\r\n    setShowNavbar(!showNavbar)\r\n  }\r\n\r\n  const toggleIcon = () => {\r\n    if (!showNavbar) {\r\n      return (\r\n        <MdOutlineKeyboardArrowDown\r\n          className=\"dragNavbar-icon\"\r\n          onClick={toggleNavbar}\r\n        />\r\n      )\r\n    }\r\n    return (\r\n      <MdOutlineKeyboardArrowUp\r\n        className=\"dragNavbar-icon\"\r\n        onClick={toggleNavbar}\r\n      />\r\n    )\r\n  }\r\n\r\n  const NavbarStyle = () => {\r\n    return {\r\n      position: 'absolute',\r\n      top: topPixel\r\n    }\r\n  }\r\n\r\n  const dragNavbarStyle = () => {\r\n    return {\r\n      position: 'absolute',\r\n      top:\r\n        topPixel < topPixelsLowerBound + step\r\n          ? '10px'\r\n          : (topPixel + navbarHeight).toString() + 'px'\r\n    }\r\n  }\r\n\r\n  const navbarHeightSpace = () => {\r\n    if (topPixel < topPixelsLowerBound + step) return 15\r\n    return topPixel + navbarHeight + step\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"navbar\" style={NavbarStyle()}>\r\n        <div className=\"nav-title\">Alee Codes</div>\r\n        <div className=\"nav-wrapper\">\r\n          <li\r\n            onClick={onClick}\r\n            data-page=\"input-page\"\r\n            className={currentPage === 'input-page' ? 'nav current' : 'nav'}\r\n          >\r\n            <AiOutlineFile\r\n              data-page=\"input-page\"\r\n              size={15}\r\n              className=\"nav-icon\"\r\n            />\r\n            <span data-page=\"input-page\">更新檔案</span>\r\n          </li>\r\n          <li\r\n            onClick={onClick}\r\n            data-page=\"analyze-page\"\r\n            className={currentPage === 'analyze-page' ? 'nav current' : 'nav'}\r\n          >\r\n            <SiSimpleanalytics\r\n              size={12}\r\n              data-page=\"analyze-page\"\r\n              className=\"nav-icon\"\r\n            />\r\n            <span data-page=\"analyze-page\">持股分析</span>\r\n          </li>\r\n        </div>\r\n      </div>\r\n      <div className=\"dragNavbar\" style={dragNavbarStyle()}>\r\n        {toggleIcon()}\r\n      </div>\r\n      <div style={{ height: navbarHeightSpace().toString() + 'px' }}></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nNavBar.propTypes = {\r\n  onClick: PropTypes.func,\r\n  currentPage: PropTypes.string\r\n}\r\n\r\nexport default NavBar\r\n","import React, { useState } from 'react'\nimport { ToastContainer, toast } from 'react-toastify'\nimport InputPage from './InputPage'\nimport Loading from './component/Loading'\nimport 'react-toastify/dist/ReactToastify.css'\nimport axios from 'axios'\nimport { getSample, getEnterprisesData, getTradingHistory } from './dataStorage'\nimport MainPage from './MainPage'\nimport NavBar from './component/NavBar'\nimport './App.css'\n\nconst App = () => {\n  const [dataBundle, setDataBundle] = useState({\n    infoData: {\n      totalCost: 0,\n      myAsset: 0,\n      ROI: 0,\n      totalProfit: 0\n    },\n    enterprises: [],\n    tradingHistory: []\n  })\n  const [reqState, setReqState] = useState({\n    reqSend: false,\n    fileLoaded: false\n  })\n  const [fileEnter, setFileEnter] = useState(false)\n  const [currentPage, setCurrentPage] = useState('input-page')\n\n  const demo = async () => {\n    const sample = getSample()\n    await requestFinanceData(sample.symbols)\n    initData(sample.csvData, sample.indexBundle)\n  }\n\n  const loadData = async (rows) => {\n    for (let i = 0; i < rows[0].length; i++) {\n      rows[0][i] = rows[0][i].trim()\n    }\n    if (isValidCSV(rows[0])) {\n      const indexBundle = {\n        symbol: rows[0].indexOf('Symbol'),\n        purchasePrice: rows[0].indexOf('Purchase Price'),\n        quantity: rows[0].indexOf('Quantity'),\n        tradingDate: rows[0].indexOf('Trade Date')\n      }\n      // store which enterprise need to request data\n      const symbols = []\n      // store valid trading history in csv\n      const data = []\n      for (let i = 1; i < rows.length; i++) {\n        if (\n          rows[i][indexBundle.symbol] &&\n          rows[i][indexBundle.purchasePrice] &&\n          rows[i][indexBundle.quantity] &&\n          rows[i][indexBundle.tradingDate]\n        ) {\n          data.push(rows[i])\n          if (!symbols.find((s) => s === rows[i][indexBundle.symbol].trim())) {\n            symbols.push(rows[i][indexBundle.symbol].trim())\n          }\n        }\n      }\n      await requestFinanceData(symbols)\n      initData(data, indexBundle)\n    }\n  }\n\n  const initData = (data, indexBundle) => {\n    const { infoData, enterprises } = getEnterprisesData(data, indexBundle)\n    const tradingHistory = getTradingHistory(data, indexBundle)\n    setDataBundle({\n      enterprises: enterprises,\n      tradingHistory: tradingHistory,\n      infoData: infoData\n    })\n    setCurrentPage('analyze-page')\n  }\n\n  const requestFinanceData = async (s) => {\n    // find symbols in trading history then parse them to string ( seperate by ',' )\n    const getReqSymbols = () => {\n      let ss = ''\n      for (const st of s) {\n        ss += st.trim() + ','\n      }\n      ss = ss.slice(0, ss.length - 1)\n      return ss\n    }\n    // request options\n    const options = {\n      method: 'GET',\n      url: 'https://yfapi.net/v8/finance/spark',\n      headers: {\n        'x-api-key': 'auNxCyh1Gf66HIXod3SN5aeAVI6JUB37Kd5iClYh'\n      },\n      params: {\n        symbols: getReqSymbols(),\n        interval: '1d',\n        range: '1y'\n      }\n    }\n    // set request state represent: \"send request already but haven't get response\"\n    setReqState({ reqSend: true, fileLoaded: false })\n    return axios\n      .request(options)\n      .then((response) => {\n        const data = response.data\n        console.log('response', data)\n        const symbols = []\n        for (const symbol in data) {\n          symbols.push({\n            symbol: symbol,\n            data: data[symbol].close,\n            date: data[symbol].timestamp\n          })\n        }\n        sessionStorage.clear()\n        sessionStorage.setItem('symbols', JSON.stringify(symbols))\n        // set request state represent: \"send request already and get response\"\n        setReqState({ reqSend: true, fileLoaded: true })\n      })\n      .catch((error) => {\n        console.log(error)\n        toast.error('請求資料時發生錯誤.')\n      })\n  }\n\n  const isValidCSV = (fileData) => {\n    const checkList = ['Symbol', 'Purchase Price', 'Quantity', 'Trade Date']\n    for (const symbol of checkList) {\n      if (fileData.indexOf(symbol) === -1) {\n        setFileEnter(false)\n        const errorMessage = 'csv 檔缺少 \" ' + symbol + ' \" 欄位.'\n        toast.error(errorMessage)\n        return false\n      }\n    }\n    return true\n  }\n\n  const handleDragEnter = (e) => {\n    e.stopPropagation()\n    e.preventDefault()\n    setFileEnter(true)\n  }\n\n  const handleDragOver = (e) => {\n    e.stopPropagation()\n    e.preventDefault()\n  }\n\n  const handleDragLeave = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n    setFileEnter(false)\n  }\n\n  const handleFileDrop = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n    const file = e.dataTransfer.items[0].getAsFile()\n    csvReader(file)\n  }\n\n  const handleFileChange = (e) => {\n    const file = e.target.files[0]\n    csvReader(file)\n    e.target.value = ''\n  }\n\n  const csvReader = (file) => {\n    const reader = new FileReader()\n    reader.onload = function () {\n      const dirtyRows = reader.result.split('\\n')\n      const rows = []\n      for (const drow of dirtyRows) {\n        rows.push(drow.split(','))\n      }\n      loadData(rows)\n    }\n    reader.readAsBinaryString(file)\n  }\n\n  const handleNavClick = (e) => {\n    const page = e.target.dataset.page\n    // error check\n    if (page === currentPage) return\n    if (page === 'analyze-page' && !reqState.fileLoaded) {\n      toast.warn('請先輸入交易資料')\n      return\n    }\n    setCurrentPage(page)\n  }\n\n  const hideOverflowStyle = {\n    maxHeight: '100vh',\n    overflow: 'hidden'\n  }\n\n  return (\n    <div style={currentPage === 'input-page' ? hideOverflowStyle : {}}>\n      <NavBar onClick={handleNavClick} currentPage={currentPage} />\n      <div className=\"App\">\n        <Loading show={!reqState.fileLoaded && reqState.reqSend} />\n        <InputPage\n          onDragEnter={handleDragEnter}\n          onDragOver={handleDragOver}\n          onDragLeave={handleDragLeave}\n          onDrop={handleFileDrop}\n          onChange={handleFileChange}\n          fileEnter={fileEnter}\n          show={\n            !reqState.reqSend ||\n            (currentPage === 'input-page' && reqState.fileLoaded)\n          }\n          demo={demo}\n        />\n        <MainPage\n          show={reqState.fileLoaded && currentPage === 'analyze-page'}\n          dataBundle={dataBundle}\n          reqState={reqState}\n        />\n        <ToastContainer\n          position=\"top-center\"\n          autoClose={3500}\n          theme=\"dark\"\n          hideProgressBar={false}\n          newestOnTop={false}\n          closeOnClick\n          rtl={false}\n          pauseOnFocusLoss\n          draggable\n          pauseOnHover\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}